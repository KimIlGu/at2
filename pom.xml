<?xml version="1.0" encoding="UTF-8"?>
<!-- 
# 메이븐 
작업 수행 + 프로젝트 관리 (빌드 툴   + 프로젝트 매니지먼트)

1. 빌드 순서
Default(Build) : 일반적인 빌드 프로세스 모델
Clean          : 빌드 시작 시 파일 삭제
Validate       : 유효성 검사
Compile        : 컴파일
Test           : 단위(Unit) 테스트 수행
Package        : 컴파일된(소스, 리소스) 패키지(jar, war) 생성
Verify         : 테스트 후 확인 단계
Install        : 패키지 로컬 저장소에 설치
Site   		   : 프로젝트 문서 작성, 사이트 생성
Deploy         : 패키지 원격 저장소에 설치

컴파일 => 테스트 => 패키지

기본 라이프사이클
클린 라이프사이클
사이트 라이프사이클

2. Phase(페이즈)
Build Lifecycle의 각각의 단계를 phase라고 한다.
phase끼리는 의존관계에 있으며, 이전 단계가 성공적으로 실행됬을시에만 실행된다는 점에서 Dependency 입니다.

메이븐의 라이브러리 의존성 관리 5가지 영역
Compile  
Provided 컴파일 시점
Runtime  실행과 Test
Test     Test
System   외부

3. Goal
특정 작업, 최소한의 실행 단위(task)
하나의 플러그인에서 여러 작업을 수행할 수 있도록 지원하며, 플러그인에서 실행할 수 있는 각각의 기능을 Goal이라고 한다.
각각의 Phase에 연계된 Goal을 실행하는 과정을 Build 라고 한다.

# 메이븐 설정 파일
1. settings.xml
메이븐 빌드 툴과 관련한 설정 파일
MAVEN_HOME/conf 디렉토리에 위치

메이븐을 빌드할 때 
의존 관계에 있는 라이브러리, 플러그인을 중앙 저장소에서 개발자 PC로 다운로드 하는 위치는 m2인데 
settings.xml에 원하는 로컬 저장소의 경로를 지정 할 수 있다.

2. POM(Project Object Model)
pom.xml은 메이븐을 이용하는 프로젝트의 루트에 존재하는 파일이다.

POM 구조
- 프로젝트 기본 정보
- 빌드 설정
- 프로젝트 관계 설정
- 빌드 환경
 
 참고 사이트 => https://cornswrold.tistory.com/218?category=806549
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion> <!-- POM model 버전 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.2.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	
	<groupId>com.sbs.kig</groupId>  <!-- 도메인(회사 이름) 역순, 다른 프로젝트와 중복을 피하기 위해 사용 -->
	<artifactId>at2</artifactId> 	<!-- 아티펙트 고유 이름 => 프로젝트 이름 -->
	<version>1</version>			<!-- 프로젝트 버전(개발상태는 SNAPSHOT을 사용한다.) -->
	<packaging>war</packaging>		<!-- 패키지 유형 -->
	<name>at2</name>				<!-- 프로젝트 이름 -->
	<description>at2</description>  <!-- 프로젝트 설명 -->

	<!-- 중복해서 사용되는 설정 -->
	<properties>					
		<java.version>1.8</java.version>
	</properties>
	
	<!-- 프로젝트와 의존관계에 있는 라이브러리 관리 -->								
	<dependencies>	
	
		<!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
		<dependency>
		    <groupId>com.google.guava</groupId>
		    <artifactId>guava</artifactId>
		    <version>29.0-jre</version>
		</dependency>	
		
		<!-- SQL 로거 -->
		<dependency>
			<groupId>org.bgee.log4jdbc-log4j2</groupId>
			<artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
			<version>1.16</version>
		</dependency>
		
		<!-- JSP 엔진 
		- ecj 3.18 => JDT(자바 개발 툴) 코어, 컴파일러, 내부 컴파일러
		- tomcat-embed-embed-el 9.0.37 => ${} EL 표기법(lang, parser, stream, util)
		- tomcat-annotaions-api 9.0.37 => 어노테이션
		- tomcat-embed-core 9.0.37 => tomcat(file, json, thread), servlet(http), catalina(session, servlets, mapper, connector), coyote, naming, auth 
		- tomcat-embed-jasper 9.0.37 => jsp(el), jasper(el, servlet, runtime)
		
		이 순서인데 임베드 코어는 이미 존재하는 라이브러리이다. -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		
		<!-- JSTL -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>jstl</artifactId>
		</dependency>
				
		<!-- Spring-AOP, JDBC, 웹 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		
		<!-- 캐쉬 설정, 라이브 리로드 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		<!-- DTO Constructor, Getter, Setter, ToString, HashCode, Equals 생성 -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		
		<!-- Tomcat 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		-->
		
		<!-- Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		
		<!-- 마이바티스 : 고급 매핑을 지원하는 퍼시스턴스 프레임워크
		DBUtil에서 했던 작업을 마이바티스가 해준다. -->
		<!-- 객체-SQL 연결 => JDBC 개선 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>2.1.3</version>
		</dependency>
		
		<!-- MySQL : mysql-connector => DB 연결 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		
	</dependencies>
	
	<!-- 빌드에 사용될 플러그인 목록 -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
